{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"\ud83d\udc4b Welcome to Streamlit Book This book contains the details of the python package called streamlit and its concepts, Visit streamlit for more details. Introduction What is streamlit? How to install? Concepts Title, input, text input, image, video, sidebar, markdown, latex ..etc References docs","title":"Home"},{"location":"index.html#welcome-to-streamlit-book","text":"This book contains the details of the python package called streamlit and its concepts, Visit streamlit for more details.","title":"  \ud83d\udc4b Welcome to Streamlit Book  "},{"location":"index.html#introduction","text":"What is streamlit? How to install?","title":"Introduction"},{"location":"index.html#concepts","text":"Title, input, text input, image, video, sidebar, markdown, latex ..etc","title":"Concepts"},{"location":"index.html#references","text":"docs","title":"References"},{"location":"concepts.html","text":"Concepts Import import streamlit as st Display Text/Title import streamlit as st st.title(\"Welcome to streamlit\") st.text('Happy Learning!') Header/Subheader import streamlit as st st.header('Header') st.subheader('Subheader') Markdown import streamlit as st # Basic markdown st.markdown('Header') # Advanced html_temp = \"\"\" <div style=\"background-color:tomato;padding:10px\"> <h2 style=\"color:white;text-align:center;\">Markdown html Example </h2> </div> \"\"\" st.markdown(html_temp,unsafe_allow_html=True) st.markdown('<i class=\"material-icons\">{}</i>'.format(\"people\"), unsafe_allow_html=True) # Load stylesheet with open(style.css) as f: st.markdown('<style>{}</style>'.format(f.read()), unsafe_allow_html=True) Latex import streamlit as st st.latex(r''' e^{i\\pi} + 1 = 0 ''') st.latex(r''' ... a + ar + a r^2 + a r^3 + \\cdots + a r^{n-1} = ... \\sum_{k=0}^{n-1} ar^k = ... a \\left(\\frac{1-r^{n}}{1-r}\\right) ... ''') Write import streamlit as st st.write('Example text') st.write(['st', 'is <', 3]) st.write(\"\u2714\ufe0f Time up!\") Code import streamlit as st st.code('s=\"Happy Learning!\" for i in range(0,10): print(s)') st.echo() with st.echo(): text = 's=\"Happy Learning!\" for i in range(0,10): print(s)' st.write(text) Help import streamlit as st st.help(range) Data import streamlit as st import pandas as pd import numpy as np df1 = pd.DataFrame( np.random.randn(50, 5), columns=('col %d' % i for i in range(5))) my_table = st.table(df1) st.write('Dataframe example') st.dataframe(df1) data = {'1':\"True\",'2':\"True\",'3':\"False\"} st.json(data) Media import streamlit as st from PIL import Image import urllib.request # Basic image st.image('./image.png') img = Image.open(\"download.jfif\") #open the image stored in specified location #Opens the image from the url img = Image.open(urllib.request.urlopen(\"https://mms.businesswire.com/media/20200616005364/en/798639/22/Streamlit_Logo_%281%29.jpg\")) st.image(img, width=300, caption=\"Simple Image\") # Video playing vid_file = open(\"videofile.mp4\",\"rb\").read() #play the video stored in specified location st.video(vid_file) #Audio audio_file = open('myaudio.ogg', 'rb') audio_bytes = audio_file.read() st.audio(audio_bytes, format='audio/ogg') Charts import streamlit as st import numpy as np import matplotlib.pyplot as plt st.line_chart({\"data\": [1, 5, 2, 6, 2, 1]}) st.area_chart({\"data\": [1, 5, 2, 6, 2, 1]}) st.bar_chart({\"data\": [1, 5, 2, 6, 2, 1]}) arr = np.random.normal(1, 1, size=100) fig, ax = plt.subplots() ax.hist(arr, bins=20) st.pyplot(fig) st.altair_chart(data) st.vega_lite_chart(data) st.plotly_chart(data) st.bokeh_chart(data) st.pydeck_chart(data) st.deck_gl_chart(data) st.graphviz_chart(data) st.map(data) Widgets import streamlit as st st.button('Click') st.checkbox('Check the checkbox') st.radio('Radio Button',[1,2,3]) st.selectbox('Select', [1,2,3]) st.multiselect('Multiselect', [1,2,3]) st.slider('slide',min_value=0, max_value=10) st.text_input('Enter Username') st.number_input('Enter a Number') st.text_area('Enter Text Here!') st.date_input('Date Input') st.time_input('Time entry') st.file_uploader('File Uploader') st.beta_color_picker('Select color') Sidebar import streamlit as st st.sidebar.<widget> <widget> : button, checkbox, radio, selectbox, multiselect, slider, text_input, number_input, text_area, date_input, time_input Control Flow import streamlit as st st.stop() Progress Bar import streamlit as st import time # Sample Progress bar my_bar = st.progress(0) for percent_complete in range(100): time.sleep(0.1) my_bar.progress(percent_complete + 1) with st.spinner('Wait for it...'): time.sleep(5) st.write('Done!') Status Messages & Others import streamlit as st st.error('Error Message') st.warning('Warning Message') st.info('Info Message') st.success('Success Message') st.exception(\"IndexError('list out of index')\") st.balloons() st.empty() place_holder = st.empty() place_holder.text('Replaced!) st.get_option(key) st.set_option(key) st.beta_set_page_config(layout='wide') Cache or Optimize import streamlit as st @st.cache func() Magic Command import streamlit as st ''' # Markdown magic This is some _**text**_. ''' df = pd.DataFrame({'col1': [40,54,67]}) df # <-- df values x = 100 'x', x # <-- 'x' and its value References docs/API","title":"Concepts"},{"location":"concepts.html#concepts","text":"","title":" Concepts "},{"location":"concepts.html#import","text":"import streamlit as st","title":"Import"},{"location":"concepts.html#display","text":"Text/Title import streamlit as st st.title(\"Welcome to streamlit\") st.text('Happy Learning!') Header/Subheader import streamlit as st st.header('Header') st.subheader('Subheader') Markdown import streamlit as st # Basic markdown st.markdown('Header') # Advanced html_temp = \"\"\" <div style=\"background-color:tomato;padding:10px\"> <h2 style=\"color:white;text-align:center;\">Markdown html Example </h2> </div> \"\"\" st.markdown(html_temp,unsafe_allow_html=True) st.markdown('<i class=\"material-icons\">{}</i>'.format(\"people\"), unsafe_allow_html=True) # Load stylesheet with open(style.css) as f: st.markdown('<style>{}</style>'.format(f.read()), unsafe_allow_html=True) Latex import streamlit as st st.latex(r''' e^{i\\pi} + 1 = 0 ''') st.latex(r''' ... a + ar + a r^2 + a r^3 + \\cdots + a r^{n-1} = ... \\sum_{k=0}^{n-1} ar^k = ... a \\left(\\frac{1-r^{n}}{1-r}\\right) ... ''') Write import streamlit as st st.write('Example text') st.write(['st', 'is <', 3]) st.write(\"\u2714\ufe0f Time up!\") Code import streamlit as st st.code('s=\"Happy Learning!\" for i in range(0,10): print(s)') st.echo() with st.echo(): text = 's=\"Happy Learning!\" for i in range(0,10): print(s)' st.write(text) Help import streamlit as st st.help(range)","title":"Display"},{"location":"concepts.html#data","text":"import streamlit as st import pandas as pd import numpy as np df1 = pd.DataFrame( np.random.randn(50, 5), columns=('col %d' % i for i in range(5))) my_table = st.table(df1) st.write('Dataframe example') st.dataframe(df1) data = {'1':\"True\",'2':\"True\",'3':\"False\"} st.json(data)","title":"Data"},{"location":"concepts.html#media","text":"import streamlit as st from PIL import Image import urllib.request # Basic image st.image('./image.png') img = Image.open(\"download.jfif\") #open the image stored in specified location #Opens the image from the url img = Image.open(urllib.request.urlopen(\"https://mms.businesswire.com/media/20200616005364/en/798639/22/Streamlit_Logo_%281%29.jpg\")) st.image(img, width=300, caption=\"Simple Image\") # Video playing vid_file = open(\"videofile.mp4\",\"rb\").read() #play the video stored in specified location st.video(vid_file) #Audio audio_file = open('myaudio.ogg', 'rb') audio_bytes = audio_file.read() st.audio(audio_bytes, format='audio/ogg')","title":"Media"},{"location":"concepts.html#charts","text":"import streamlit as st import numpy as np import matplotlib.pyplot as plt st.line_chart({\"data\": [1, 5, 2, 6, 2, 1]}) st.area_chart({\"data\": [1, 5, 2, 6, 2, 1]}) st.bar_chart({\"data\": [1, 5, 2, 6, 2, 1]}) arr = np.random.normal(1, 1, size=100) fig, ax = plt.subplots() ax.hist(arr, bins=20) st.pyplot(fig) st.altair_chart(data) st.vega_lite_chart(data) st.plotly_chart(data) st.bokeh_chart(data) st.pydeck_chart(data) st.deck_gl_chart(data) st.graphviz_chart(data) st.map(data)","title":"Charts"},{"location":"concepts.html#widgets","text":"import streamlit as st st.button('Click') st.checkbox('Check the checkbox') st.radio('Radio Button',[1,2,3]) st.selectbox('Select', [1,2,3]) st.multiselect('Multiselect', [1,2,3]) st.slider('slide',min_value=0, max_value=10) st.text_input('Enter Username') st.number_input('Enter a Number') st.text_area('Enter Text Here!') st.date_input('Date Input') st.time_input('Time entry') st.file_uploader('File Uploader') st.beta_color_picker('Select color')","title":"Widgets"},{"location":"concepts.html#sidebar","text":"import streamlit as st st.sidebar.<widget> <widget> : button, checkbox, radio, selectbox, multiselect, slider, text_input, number_input, text_area, date_input, time_input","title":"Sidebar"},{"location":"concepts.html#control-flow","text":"import streamlit as st st.stop()","title":"Control Flow"},{"location":"concepts.html#progress-bar","text":"import streamlit as st import time # Sample Progress bar my_bar = st.progress(0) for percent_complete in range(100): time.sleep(0.1) my_bar.progress(percent_complete + 1) with st.spinner('Wait for it...'): time.sleep(5) st.write('Done!')","title":"Progress Bar"},{"location":"concepts.html#status-messages-others","text":"import streamlit as st st.error('Error Message') st.warning('Warning Message') st.info('Info Message') st.success('Success Message') st.exception(\"IndexError('list out of index')\") st.balloons() st.empty() place_holder = st.empty() place_holder.text('Replaced!) st.get_option(key) st.set_option(key) st.beta_set_page_config(layout='wide')","title":"Status Messages &amp; Others"},{"location":"concepts.html#cache-or-optimize","text":"import streamlit as st @st.cache func()","title":"Cache or Optimize"},{"location":"concepts.html#magic-command","text":"import streamlit as st ''' # Markdown magic This is some _**text**_. ''' df = pd.DataFrame({'col1': [40,54,67]}) df # <-- df values x = 100 'x', x # <-- 'x' and its value","title":"Magic Command"},{"location":"concepts.html#references","text":"docs/API","title":"References"},{"location":"examples.html","text":"Example Apps and codes TBD","title":"Examples"},{"location":"examples.html#example-apps-and-codes","text":"TBD","title":" Example Apps and codes "},{"location":"introduction.html","text":"Introduction Streamlit is a python library that makes easy to create and share the web applications with out html, css and javascript. 1. Pre-requisites Python Version > 3.6 2. Installation Standalone \ud83c\udfb7 pip install streamlit streamlit hello Anaconda \ud83d\udc0d conda create --name streamlit (create new environment) conda activate streamlit (activate) pip install streamlit streamlit hello conda deactivate (to deactivate ) Venv \u2705(Built in python no need to do pip install) python -m venv streamlit (create new environment) cd pathtostreamlit\\Scripts\\activate.bat (activate) pip install streamlit streamlit hello cd pathtostreamlit\\Scripts\\deactivate.bat (deactivate) Virtualenv \ud83d\udc4b pip install virtualenv virtual streamlit (create new environment) cd pathtostreamlit\\Scripts\\activate.bat (activate) pip install streamlit streamlit hello cd pathtostreamlit\\Scripts\\deactivate.bat (deactivate) Pipenv \ud83d\udd06 pip install pipenv pipenv install streamlit pipenv shell or pipenv run (activate) streamlit hello exit (deactivate) 3. Uninstallation pip uninstall streamlit 4. Commands Basic Commands \u2705 streamlit --help streamlit hello streamlit config show streamlit cache clear streamlit docs streamlit --version Run Command \ud83d\udc4b streamlit run scriptname.py streamlit run 'url.py' (Github or Gist) Gist Example - streamlit run https://gist.github.com/SurendraRedd/feaa6f29961501fa9fce7a45abc14651/raw/Example.py GitHub Example - streamlit run https://github.com/SurendraRedd/StreamlitProjects/blob/master/Example.py streamlit run app.py --server.port 8503 (to run in different port)","title":"Introduction"},{"location":"introduction.html#introduction","text":"Streamlit is a python library that makes easy to create and share the web applications with out html, css and javascript.","title":" Introduction "},{"location":"introduction.html#1-pre-requisites","text":"Python Version > 3.6","title":"1. Pre-requisites"},{"location":"introduction.html#2-installation","text":"Standalone \ud83c\udfb7 pip install streamlit streamlit hello Anaconda \ud83d\udc0d conda create --name streamlit (create new environment) conda activate streamlit (activate) pip install streamlit streamlit hello conda deactivate (to deactivate ) Venv \u2705(Built in python no need to do pip install) python -m venv streamlit (create new environment) cd pathtostreamlit\\Scripts\\activate.bat (activate) pip install streamlit streamlit hello cd pathtostreamlit\\Scripts\\deactivate.bat (deactivate) Virtualenv \ud83d\udc4b pip install virtualenv virtual streamlit (create new environment) cd pathtostreamlit\\Scripts\\activate.bat (activate) pip install streamlit streamlit hello cd pathtostreamlit\\Scripts\\deactivate.bat (deactivate) Pipenv \ud83d\udd06 pip install pipenv pipenv install streamlit pipenv shell or pipenv run (activate) streamlit hello exit (deactivate)","title":"2. Installation"},{"location":"introduction.html#3-uninstallation","text":"pip uninstall streamlit","title":"3. Uninstallation"},{"location":"introduction.html#4-commands","text":"Basic Commands \u2705 streamlit --help streamlit hello streamlit config show streamlit cache clear streamlit docs streamlit --version Run Command \ud83d\udc4b streamlit run scriptname.py streamlit run 'url.py' (Github or Gist) Gist Example - streamlit run https://gist.github.com/SurendraRedd/feaa6f29961501fa9fce7a45abc14651/raw/Example.py GitHub Example - streamlit run https://github.com/SurendraRedd/StreamlitProjects/blob/master/Example.py streamlit run app.py --server.port 8503 (to run in different port)","title":"4. Commands"},{"location":"references.html","text":"References TBD","title":"References"},{"location":"references.html#references","text":"TBD","title":" References "}]}